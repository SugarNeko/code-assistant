// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: proto/grpcbin/grpcbin.proto

package grpcbin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCBin_Index_FullMethodName                          = "/grpcbin.GRPCBin/Index"
	GRPCBin_Empty_FullMethodName                          = "/grpcbin.GRPCBin/Empty"
	GRPCBin_DummyUnary_FullMethodName                     = "/grpcbin.GRPCBin/DummyUnary"
	GRPCBin_DummyServerStream_FullMethodName              = "/grpcbin.GRPCBin/DummyServerStream"
	GRPCBin_DummyClientStream_FullMethodName              = "/grpcbin.GRPCBin/DummyClientStream"
	GRPCBin_DummyBidirectionalStreamStream_FullMethodName = "/grpcbin.GRPCBin/DummyBidirectionalStreamStream"
	GRPCBin_SpecificError_FullMethodName                  = "/grpcbin.GRPCBin/SpecificError"
	GRPCBin_RandomError_FullMethodName                    = "/grpcbin.GRPCBin/RandomError"
	GRPCBin_HeadersUnary_FullMethodName                   = "/grpcbin.GRPCBin/HeadersUnary"
	GRPCBin_NoResponseUnary_FullMethodName                = "/grpcbin.GRPCBin/NoResponseUnary"
)

// GRPCBinClient is the client API for GRPCBin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCBinClient interface {
	// This endpoint
	Index(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*IndexReply, error)
	// Unary endpoint that takes no argument and replies an empty message.
	Empty(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Unary endpoint that replies a received DummyMessage
	DummyUnary(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (*DummyMessage, error)
	// Stream endpoint that sends back 10 times the received DummyMessage
	DummyServerStream(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DummyMessage], error)
	// Stream endpoint that receives 10 DummyMessages and replies with the last received one
	DummyClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DummyMessage, DummyMessage], error)
	// Stream endpoint that sends back a received DummyMessage indefinitely (chat mode)
	DummyBidirectionalStreamStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DummyMessage, DummyMessage], error)
	// Unary endpoint that raises a specified (by code) gRPC error
	SpecificError(ctx context.Context, in *SpecificErrorRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Unary endpoint that raises a random gRPC error
	RandomError(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Unary endpoint that returns headers
	HeadersUnary(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HeadersMessage, error)
	// Unary endpoint that returns no respnose
	NoResponseUnary(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type gRPCBinClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCBinClient(cc grpc.ClientConnInterface) GRPCBinClient {
	return &gRPCBinClient{cc}
}

func (c *gRPCBinClient) Index(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*IndexReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexReply)
	err := c.cc.Invoke(ctx, GRPCBin_Index_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) Empty(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, GRPCBin_Empty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) DummyUnary(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (*DummyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyMessage)
	err := c.cc.Invoke(ctx, GRPCBin_DummyUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) DummyServerStream(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DummyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[0], GRPCBin_DummyServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DummyMessage, DummyMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyServerStreamClient = grpc.ServerStreamingClient[DummyMessage]

func (c *gRPCBinClient) DummyClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DummyMessage, DummyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[1], GRPCBin_DummyClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DummyMessage, DummyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyClientStreamClient = grpc.ClientStreamingClient[DummyMessage, DummyMessage]

func (c *gRPCBinClient) DummyBidirectionalStreamStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DummyMessage, DummyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRPCBin_ServiceDesc.Streams[2], GRPCBin_DummyBidirectionalStreamStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DummyMessage, DummyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyBidirectionalStreamStreamClient = grpc.BidiStreamingClient[DummyMessage, DummyMessage]

func (c *gRPCBinClient) SpecificError(ctx context.Context, in *SpecificErrorRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, GRPCBin_SpecificError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) RandomError(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, GRPCBin_RandomError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) HeadersUnary(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HeadersMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeadersMessage)
	err := c.cc.Invoke(ctx, GRPCBin_HeadersUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCBinClient) NoResponseUnary(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, GRPCBin_NoResponseUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCBinServer is the server API for GRPCBin service.
// All implementations must embed UnimplementedGRPCBinServer
// for forward compatibility.
type GRPCBinServer interface {
	// This endpoint
	Index(context.Context, *EmptyMessage) (*IndexReply, error)
	// Unary endpoint that takes no argument and replies an empty message.
	Empty(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Unary endpoint that replies a received DummyMessage
	DummyUnary(context.Context, *DummyMessage) (*DummyMessage, error)
	// Stream endpoint that sends back 10 times the received DummyMessage
	DummyServerStream(*DummyMessage, grpc.ServerStreamingServer[DummyMessage]) error
	// Stream endpoint that receives 10 DummyMessages and replies with the last received one
	DummyClientStream(grpc.ClientStreamingServer[DummyMessage, DummyMessage]) error
	// Stream endpoint that sends back a received DummyMessage indefinitely (chat mode)
	DummyBidirectionalStreamStream(grpc.BidiStreamingServer[DummyMessage, DummyMessage]) error
	// Unary endpoint that raises a specified (by code) gRPC error
	SpecificError(context.Context, *SpecificErrorRequest) (*EmptyMessage, error)
	// Unary endpoint that raises a random gRPC error
	RandomError(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// Unary endpoint that returns headers
	HeadersUnary(context.Context, *EmptyMessage) (*HeadersMessage, error)
	// Unary endpoint that returns no respnose
	NoResponseUnary(context.Context, *EmptyMessage) (*EmptyMessage, error)
	mustEmbedUnimplementedGRPCBinServer()
}

// UnimplementedGRPCBinServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCBinServer struct{}

func (UnimplementedGRPCBinServer) Index(context.Context, *EmptyMessage) (*IndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedGRPCBinServer) Empty(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Empty not implemented")
}
func (UnimplementedGRPCBinServer) DummyUnary(context.Context, *DummyMessage) (*DummyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DummyUnary not implemented")
}
func (UnimplementedGRPCBinServer) DummyServerStream(*DummyMessage, grpc.ServerStreamingServer[DummyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method DummyServerStream not implemented")
}
func (UnimplementedGRPCBinServer) DummyClientStream(grpc.ClientStreamingServer[DummyMessage, DummyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method DummyClientStream not implemented")
}
func (UnimplementedGRPCBinServer) DummyBidirectionalStreamStream(grpc.BidiStreamingServer[DummyMessage, DummyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method DummyBidirectionalStreamStream not implemented")
}
func (UnimplementedGRPCBinServer) SpecificError(context.Context, *SpecificErrorRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecificError not implemented")
}
func (UnimplementedGRPCBinServer) RandomError(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomError not implemented")
}
func (UnimplementedGRPCBinServer) HeadersUnary(context.Context, *EmptyMessage) (*HeadersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadersUnary not implemented")
}
func (UnimplementedGRPCBinServer) NoResponseUnary(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoResponseUnary not implemented")
}
func (UnimplementedGRPCBinServer) mustEmbedUnimplementedGRPCBinServer() {}
func (UnimplementedGRPCBinServer) testEmbeddedByValue()                 {}

// UnsafeGRPCBinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCBinServer will
// result in compilation errors.
type UnsafeGRPCBinServer interface {
	mustEmbedUnimplementedGRPCBinServer()
}

func RegisterGRPCBinServer(s grpc.ServiceRegistrar, srv GRPCBinServer) {
	// If the following call pancis, it indicates UnimplementedGRPCBinServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we result this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCBin_ServiceDesc, srv)
}

func _GRPCBin_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).Index(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_Empty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).Empty(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_DummyUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).DummyUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_DummyUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).DummyUnary(ctx, req.(*DummyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_DummyServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCBinServer).DummyServerStream(m, &grpc.GenericServerStream[DummyMessage, DummyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyServerStreamServer = grpc.ServerStreamingServer[DummyMessage]

func _GRPCBin_DummyClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCBinServer).DummyClientStream(&grpc.GenericServerStream[DummyMessage, DummyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyClientStreamServer = grpc.ClientStreamingServer[DummyMessage, DummyMessage]

func _GRPCBin_DummyBidirectionalStreamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCBinServer).DummyBidirectionalStreamStream(&grpc.GenericServerStream[DummyMessage, DummyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCBin_DummyBidirectionalStreamStreamServer = grpc.BidiStreamingServer[DummyMessage, DummyMessage]

func _GRPCBin_SpecificError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).SpecificError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_SpecificError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).SpecificError(ctx, req.(*SpecificErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_RandomError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).RandomError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_RandomError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).RandomError(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_HeadersUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).HeadersUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_HeadersUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).HeadersUnary(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCBin_NoResponseUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCBinServer).NoResponseUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCBin_NoResponseUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCBinServer).NoResponseUnary(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCBin_ServiceDesc is the grpc.ServiceDesc for GRPCBin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCBin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcbin.GRPCBin",
	HandlerType: (*GRPCBinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _GRPCBin_Index_Handler,
		},
		{
			MethodName: "Empty",
			Handler:    _GRPCBin_Empty_Handler,
		},
		{
			MethodName: "DummyUnary",
			Handler:    _GRPCBin_DummyUnary_Handler,
		},
		{
			MethodName: "SpecificError",
			Handler:    _GRPCBin_SpecificError_Handler,
		},
		{
			MethodName: "RandomError",
			Handler:    _GRPCBin_RandomError_Handler,
		},
		{
			MethodName: "HeadersUnary",
			Handler:    _GRPCBin_HeadersUnary_Handler,
		},
		{
			MethodName: "NoResponseUnary",
			Handler:    _GRPCBin_NoResponseUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DummyServerStream",
			Handler:       _GRPCBin_DummyServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DummyClientStream",
			Handler:       _GRPCBin_DummyClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DummyBidirectionalStreamStream",
			Handler:       _GRPCBin_DummyBidirectionalStreamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpcbin/grpcbin.proto",
}
